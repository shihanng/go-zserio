package zserio

import (
	"io"

	"github.com/icza/bitio"
)

type Reader interface {
	io.Reader
	io.ByteReader

	ReadBits(n uint8) (uint64, error)
	ReadBool() (bool, error)
	Align(boundary uint8) error
}

type Writer interface {
	io.Writer
	io.ByteWriter

	WriteBits(r uint64, n uint8) error
	WriteBool(bool) error
	WriteBitsUnsafe(r uint64, n uint8) error
	Align(boundary uint8) error
}

// Unmarshaler is the interface implemented by types that can be read from a
// zserio bitstream. The implementation is normally automatically generated
// by the zserio compiler.
type Unmarshaler interface {
	UnmarshalZserio(r *bitio.CountReader) error
}

// Marshaler is the interface implemented by types that can be serialized
// themselves to a zserio bitstream. The implementation is normally automatically
// generated by the zserio compiler.
type Marshaler interface {
	MarshalZserio(w *bitio.CountWriter) error
	ZserioBitSize(bitPosition int) (int, error)
}

type ZserioType interface {
	Marshaler
	Unmarshaler
	Clone() ZserioType
}

type PackableUnmarshaler interface {
	ZserioCreatePackingContext(contextNode *PackingContextNode) error
	UnmarshalZserioPacked(contextNode *PackingContextNode, r *bitio.CountReader) error
}

type PackableMarshaler interface {
	MarshalZserioPacked(contextNode *PackingContextNode, r *bitio.CountWriter) error
	ZserioInitPackingContext(contextNode *PackingContextNode) error
	ZserioInitializeOffsetsPacked(contextNode *PackingContextNode, bitPosition int) int
	ZserioBitSizePacked(contextNode *PackingContextNode, bitPosition int) (int, error)
}

type PackableZserioType interface {
	ZserioType
	PackableMarshaler
	PackableUnmarshaler
}
